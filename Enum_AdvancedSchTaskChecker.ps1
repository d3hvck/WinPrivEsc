<#
.SYNOPSIS
    Comprehensive scheduled task checker for standalone workstations
.DESCRIPTION
    Checks all scheduled tasks, their actions, and verifies security context
    with special attention to user-configured and hidden tasks
.NOTES
    Version     : 1.1
    Author      : d3hvck
    Created     : $(Get-Date)
    Requires    : PowerShell 5.1+, Admin rights
#>

$reportPath = "$env:USERPROFILE\Desktop\Workstation_Tasks_Report_$(Get-Date -Format 'yyyyMMdd_HHmm').html"
$highRiskPaths = @("$env:APPDATA", "$env:LOCALAPPDATA", "C:\Temp", "Downloads")

$htmlHeader = @"
<!DOCTYPE html>
<html>
<head>
    <title>Workstation Task Security Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #0066cc; }
        h2 { color: #0099cc; margin-top: 30px; }
        table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
        th { background-color: #0066cc; color: white; text-align: left; padding: 8px; }
        td { padding: 8px; border-bottom: 1px solid #ddd; }
        .warning { background-color: #fff3cd; }
        .danger { background-color: #f8d7da; }
        .safe { background-color: #d4edda; }
    </style>
</head>
<body>
    <h1>Workstation Scheduled Task Security Report</h1>
    <p>Generated on: $(Get-Date)</p>
    <p>Computer: $env:COMPUTERNAME</p>
    <p>User: $env:USERNAME</p>
"@

$htmlFooter = @"
    <p>Report generated by Workstation Security Check Script</p>
</body>
</html>
"@

$htmlHeader | Out-File -FilePath $reportPath

try {
    $tasks = schtasks /query /fo csv /v | ConvertFrom-Csv
    
    $systemTasks = $tasks | Where-Object { $_.'Run As User' -like "NT AUTHORITY\*" -or $_.'Run As User' -like "SYSTEM" }
    $localUserTasks = $tasks | Where-Object { $_.'Run As User' -like "$env:COMPUTERNAME\*" }
    $otherUserTasks = $tasks | Where-Object { 
        $_.'Run As User' -notlike "NT AUTHORITY\*" -and 
        $_.'Run As User' -notlike "SYSTEM" -and
        $_.'Run As User' -notlike "$env:COMPUTERNAME\*"
    }
    
    @"
    <h2>Task Summary</h2>
    <table>
        <tr><th>Type</th><th>Count</th></tr>
        <tr><td>System Tasks</td><td>$($systemTasks.Count)</td></tr>
        <tr><td>Local User Tasks</td><td>$($localUserTasks.Count)</td></tr>
        <tr><td>Other User Tasks</td><td>$($otherUserTasks.Count)</td></tr>
        <tr><td>Total Tasks</td><td>$($tasks.Count)</td></tr>
    </table>
"@ | Out-File -FilePath $reportPath -Append
    
    @"
    <h2>Task Details</h2>
    <table>
        <tr>
            <th>Task Name</th>
            <th>Run As User</th>
            <th>Status</th>
            <th>Schedule</th>
            <th>Action</th>
            <th>Signature</th>
            <th>Risk</th>
        </tr>
"@ | Out-File -FilePath $reportPath -Append
    
    foreach ($task in $tasks) {
        $riskLevel = "low"
        $rowClass = "safe"
        $signatureStatus = "Not checked"
        
        $action = $task.'Task To Run'
        $executablePath = if ($action) {
            $action -replace '^"|"$','' -split ' ' | Select-Object -First 1
        }
        
        if ($executablePath -and (Test-Path -Path $executablePath)) {
            try {
                $signature = Get-AuthenticodeSignature -FilePath $executablePath -ErrorAction Stop
                $signatureStatus = $signature.Status
                
                if ($signature.Status -ne "Valid") {
                    $riskLevel = "high"
                    $rowClass = "danger"
                }
            } catch {
                $signatureStatus = "Check failed"
            }
        }
        
        foreach ($path in $highRiskPaths) {
            if ($executablePath -like "$path*") {
                $riskLevel = "high"
                $rowClass = "danger"
                break
            }
        }
        
        if ($task.'Run As User' -like "$env:COMPUTERNAME\*") {
            $riskLevel = "medium"
            $rowClass = "warning"
        }
        
        if ($task.TaskName -like "\Microsoft\*" -or $task.TaskName -like "\Windows\*") {
            $riskLevel = "low"
            $rowClass = "safe"
        }
        
        @"
        <tr class="$rowClass">
            <td>$($task.TaskName)</td>
            <td>$($task.'Run As User')</td>
            <td>$($task.Status)</td>
            <td>$($task.'Schedule Type')</td>
            <td>$(if($action){$action}else{"N/A"})</td>
            <td>$signatureStatus</td>
            <td>$riskLevel</td>
        </tr>
"@ | Out-File -FilePath $reportPath -Append
    }
    
    "</table>" | Out-File -FilePath $reportPath -Append
    
    $suspiciousTasks = $tasks | Where-Object {
        $_.'Run As User' -like "$env:COMPUTERNAME\*" -or 
        $_.'Task To Run' -like "*$env:APPDATA*" -or
        $_.'Task To Run' -like "*$env:LOCALAPPDATA*" -or
        ($_.Author -notlike "Microsoft*" -and $_.Author -notlike "Windows*")
    }
    
    if ($suspiciousTasks) {
        @"
        <h2>Potentially Suspicious Tasks</h2>
        <table>
            <tr>
                <th>Task Name</th>
                <th>Run As User</th>
                <th>Action</th>
                <th>Author</th>
                <th>Risk Factors</th>
            </tr>
"@ | Out-File -FilePath $reportPath -Append
        
        foreach ($task in $suspiciousTasks) {
            $riskFactors = @()
            
            if ($task.'Run As User' -like "$env:COMPUTERNAME\*") {
                $riskFactors += "Runs as local account"
            }
            
            if ($task.'Task To Run' -like "*$env:APPDATA*") {
                $riskFactors += "Runs from user AppData"
            }
            
            if ($task.'Task To Run' -like "*$env:LOCALAPPDATA*") {
                $riskFactors += "Runs from user LocalAppData"
            }
            
            if ($task.Author -notlike "Microsoft*" -and $task.Author -notlike "Windows*") {
                $riskFactors += "Non-Microsoft author"
            }
            
            @"
            <tr class="danger">
                <td>$($task.TaskName)</td>
                <td>$($task.'Run As User')</td>
                <td>$($task.'Task To Run')</td>
                <td>$($task.Author)</td>
                <td>$($riskFactors -join ', ')</td>
            </tr>
"@ | Out-File -FilePath $reportPath -Append
        }
        
        "</table>" | Out-File -FilePath $reportPath -Append
    }
    
} catch {
    "<p style='color:red;'>Error occurred while checking tasks: $_</p>" | Out-File -FilePath $reportPath -Append
}

$htmlFooter | Out-File -FilePath $reportPath -Append

Start-Process $reportPath

Write-Host "Task security check completed. Report saved to $reportPath" -ForegroundColor Green