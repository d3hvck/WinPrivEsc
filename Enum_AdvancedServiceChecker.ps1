<#
.SYNOPSIS
    Comprehensive service checker for standalone workstations
.DESCRIPTION
    Checks all services, their executables, and verifies digital signatures
    with special attention to user-configured and third-party services
.NOTES
    Version     : 1.1
    Author      : d3hvck
    Created     : $(Get-Date)
    Requires    : PowerShell 5.1+, Admin rights
#>

# Configuration
$reportPath = "$env:USERPROFILE\Desktop\Workstation_Services_Report_$(Get-Date -Format 'yyyyMMdd_HHmm').html"
$highRiskPaths = @("$env:APPDATA", "$env:LOCALAPPDATA", "C:\Temp", "Downloads")

$htmlHeader = @"
<!DOCTYPE html>
<html>
<head>
    <title>Workstation Service Security Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #0066cc; }
        h2 { color: #0099cc; margin-top: 30px; }
        table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
        th { background-color: #0066cc; color: white; text-align: left; padding: 8px; }
        td { padding: 8px; border-bottom: 1px solid #ddd; }
        .warning { background-color: #fff3cd; }
        .danger { background-color: #f8d7da; }
        .safe { background-color: #d4edda; }
    </style>
</head>
<body>
    <h1>Workstation Service Security Report</h1>
    <p>Generated on: $(Get-Date)</p>
    <p>Computer: $env:COMPUTERNAME</p>
    <p>User: $env:USERNAME</p>
"@

$htmlFooter = @"
    <p>Report generated by Workstation Security Check Script</p>
</body>
</html>
"@

$htmlHeader | Out-File -FilePath $reportPath

try {
    $services = Get-CimInstance -ClassName Win32_Service | 
                Select-Object Name, DisplayName, State, StartMode, StartName, PathName, ProcessId, Description
                
    # Count services by type
    $automaticServices = $services | Where-Object { $_.StartMode -eq "Auto" }
    $manualServices = $services | Where-Object { $_.StartMode -eq "Manual" }
    $disabledServices = $services | Where-Object { $_.StartMode -eq "Disabled" }
    
    @"
    <h2>Service Summary</h2>
    <table>
        <tr><th>Type</th><th>Count</th></tr>
        <tr><td>Automatic</td><td>$($automaticServices.Count)</td></tr>
        <tr><td>Manual</td><td>$($manualServices.Count)</td></tr>
        <tr><td>Disabled</td><td>$($disabledServices.Count)</td></tr>
        <tr><td>Total</td><td>$($services.Count)</td></tr>
    </table>
"@ | Out-File -FilePath $reportPath -Append
    
    @"
    <h2>Service Details</h2>
    <table>
        <tr>
            <th>Service Name</th>
            <th>Display Name</th>
            <th>Status</th>
            <th>Run As</th>
            <th>Startup</th>
            <th>Executable</th>
            <th>Signature</th>
            <th>Risk</th>
        </tr>
"@ | Out-File -FilePath $reportPath -Append
    
    foreach ($service in $services) {
        $riskLevel = "low"
        $rowClass = "safe"
        $signatureStatus = "Not checked"
        
        $executablePath = if ($service.PathName) {
            $service.PathName -replace '^"|"$','' -split ' ' | Select-Object -First 1
        }
        
        if ($executablePath -and (Test-Path -Path $executablePath)) {
            try {
                $signature = Get-AuthenticodeSignature -FilePath $executablePath -ErrorAction Stop
                $signatureStatus = $signature.Status
                
                if ($signature.Status -ne "Valid") {
                    $riskLevel = "high"
                    $rowClass = "danger"
                }
            } catch {
                $signatureStatus = "Check failed"
            }
        }
        
        foreach ($path in $highRiskPaths) {
            if ($executablePath -like "$path*") {
                $riskLevel = "high"
                $rowClass = "danger"
                break
            }
        }
        
        if ($service.StartName -like "$env:COMPUTERNAME\*" -or $service.StartName -like "*@*") {
            $riskLevel = "medium"
            $rowClass = "warning"
        }
        
        @"
        <tr class="$rowClass">
            <td>$($service.Name)</td>
            <td>$($service.DisplayName)</td>
            <td>$($service.State)</td>
            <td>$($service.StartName)</td>
            <td>$($service.StartMode)</td>
            <td>$(if($executablePath){$executablePath}else{"N/A"})</td>
            <td>$signatureStatus</td>
            <td>$riskLevel</td>
        </tr>
"@ | Out-File -FilePath $reportPath -Append
    }
    
    "</table>" | Out-File -FilePath $reportPath -Append
    
    $suspiciousServices = $services | Where-Object {
        $_.StartName -like "$env:COMPUTERNAME\*" -or 
        $_.PathName -like "*$env:APPDATA*" -or
        $_.PathName -like "*$env:LOCALAPPDATA*"
    }
    
    if ($suspiciousServices) {
        @"
        <h2>Potentially Suspicious Services</h2>
        <table>
            <tr>
                <th>Service Name</th>
                <th>Run As</th>
                <th>Executable</th>
                <th>Risk Factors</th>
            </tr>
"@ | Out-File -FilePath $reportPath -Append
        
        foreach ($service in $suspiciousServices) {
            $riskFactors = @()
            
            if ($service.StartName -like "$env:COMPUTERNAME\*") {
                $riskFactors += "Runs as local account"
            }
            
            if ($service.PathName -like "*$env:APPDATA*") {
                $riskFactors += "Runs from user AppData"
            }
            
            if ($service.PathName -like "*$env:LOCALAPPDATA*") {
                $riskFactors += "Runs from user LocalAppData"
            }
            
            @"
            <tr class="danger">
                <td>$($service.Name)</td>
                <td>$($service.StartName)</td>
                <td>$($service.PathName)</td>
                <td>$($riskFactors -join ', ')</td>
            </tr>
"@ | Out-File -FilePath $reportPath -Append
        }
        
        "</table>" | Out-File -FilePath $reportPath -Append
    }
    
} catch {
    "<p style='color:red;'>Error occurred while checking services: $_</p>" | Out-File -FilePath $reportPath -Append
}

$htmlFooter | Out-File -FilePath $reportPath -Append

Start-Process $reportPath

Write-Host "Service security check completed. Report saved to $reportPath" -ForegroundColor Green